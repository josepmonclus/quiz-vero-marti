---
interface Props {
	question: string;
}


const { question } = Astro.props;

import { questions } from '../data/data';
import LastPopup from './LastPopup.astro';
---

<div class="w-full max-w">
    <form class="bg-gray-200 shadow-md rounded px-8 pt-6 pb-8 mb-4">
        <input id="input-question-id" type="text" class="hidden" value={question}>
        <div class="mb-4">
            <label class="label-question block text-neon-light text-sm font-bold mb-2" for="answer">
                ...
            </label>
            <input class="shadow appearance-none border rounded w-full py-2 px-3 text-neon-light leading-tight focus:outline-none focus:shadow-outline" 
                id="input-answer" 
                type="text" 
                placeholder="Resposta"
                autocomplete="off">
        </div>
        <div class="flex items-center justify-center pt-5">
            <button class="btn-answer bg-neon-light hover:bg-neon-medium-light text-white font-bold py-2 px-6 mx-10 rounded focus:outline-none focus:shadow-outline" type="button">
              Ho tenim!
            </button>
            <a class="open-popup inline-block align-baseline font-bold text-sm text-neon-light hover:text-neon-medium-light" href="#">
              Ni puta idea!
            </a>
          </div>
    </form>
    <p class="text-center text-gray-500 text-xs">
        Made with <a href="/video.mp4" target="_blank" class="heart-link">
            <span id="hearth">‚ù§Ô∏èÔ∏è</span> by Josep, Mireia, Gina, Aleix, Nuria, Ona, Bernal & Pol 
        </a>
      </p>
</div>

<lastPopup/>

<script>
    import { encodeSHA256 } from '../scripts/sha256';
    import { questions } from '../data/data';
    import confetti from 'canvas-confetti';   

    let answerBtn: HTMLElement = document.querySelector('.btn-answer');

    const showPopup = () => {
        const popup = document.createElement('div');
        popup.style.position = 'fixed';
        popup.style.top = '0';
        popup.style.left = '0';
        popup.style.width = '100%';
        popup.style.height = '100%';
        popup.style.backgroundColor = 'rgba(0, 0, 0, 0.8)';
        popup.style.display = 'flex';
        popup.style.flexDirection = 'column';
        popup.style.justifyContent = 'center';
        popup.style.alignItems = 'center';
        popup.style.zIndex = '1000';
        popup.style.padding = '10px'; // A√±adido para asegurar que el contenido se vea bien en m√≥viles

        const video = document.createElement('video');
        video.src = '/videoplayback.mp4';
        video.autoplay = true;
        video.loop = true;
        video.style.width = '100%'; // Cambiado a 100% para que se ajuste al ancho de la pantalla
        video.style.height = 'auto'; // Cambiado a auto para mantener la proporci√≥n del video
        video.style.objectFit = 'cover';

        const timer = document.createElement('div');
        timer.style.position = 'absolute';
        timer.style.bottom = '20px';
        timer.style.color = '#fff';
        timer.style.fontSize = '20px';
        timer.style.textAlign = 'center'; // Asegura que el texto est√© centrado en m√≥viles

        popup.appendChild(video);
        popup.appendChild(timer);
        document.body.appendChild(popup);
        let failureCount = parseInt(localStorage.getItem('failureCount')) || 1;
        let remainingTime = Math.pow(2, failureCount - 1);
        timer.innerText = `Temps restant: ${remainingTime} segons`;
    }

    const  showReward = async (question) =>{
        const hearth = document.getElementById('hearth');
        let size = parseFloat(localStorage.getItem('hearthSize') || '0.75');
        size += 0.2;
        if(size>4) size = 4;
        hearth.style.fontSize = `${size}rem`;
        localStorage.setItem('hearthSize', size.toString());
        const rewardPopup = document.createElement('div');
        rewardPopup.style.position = 'fixed';
        rewardPopup.style.top = '50%';
        rewardPopup.style.left = '50%';
        rewardPopup.style.transform = 'translate(-50%, -50%)';
        rewardPopup.style.width = '50%'; 
        rewardPopup.style.height = '50%'; 
        rewardPopup.classList.add('bg-neon-light');
        rewardPopup.style.borderRadius = '10px';
        rewardPopup.style.padding = '40px'; 
        rewardPopup.style.zIndex = '1002'; 
        rewardPopup.style.textAlign = 'center';
        rewardPopup.style.fontSize = '5vw'; 
        rewardPopup.style.color = '#333';
        rewardPopup.style.display = 'flex';
        rewardPopup.style.flexDirection = 'column';
        rewardPopup.style.justifyContent = 'center';
        rewardPopup.style.alignItems = 'center';

        const aplause = document.createElement('div');
        aplause.innerText = 'üëèüëèüëè';
        rewardPopup.appendChild(aplause);

        const title = document.createElement('div');
        title.style.color = 'white';
        title.innerText = 'Codi:';
        title.classList.add('my-5');

        const rewardText = document.createElement('div');
        rewardText.style.color = 'white';

        if (questions[question].reward_type === 'num') {
            let rewardValue;
            for (let i = 0; i <= 9; i++) {
                if (await encodeSHA256(i.toString()) === questions[question].reward_num) {
                    rewardValue = i;
                    break;
                }
            }
            let rewardLetter;
            for (let letter of ['A', 'B', 'C', 'D']) {
                if (await encodeSHA256(letter) === questions[question].reward_let) {
                    rewardLetter = letter;
                    break;
                }
            }

            rewardPopup.appendChild(title);

            rewardText.innerText = `${rewardLetter} = ${rewardValue}`;
            rewardPopup.appendChild(rewardText);
        } else if (questions[question].reward_type === 'let') {
            let rewardPos;
            for (let i = 0; i <= 9; i++) {
                if (await encodeSHA256(i.toString()) === questions[question].reward_pos) {
                    rewardPos = i;
                    break;
                }
            }
            let rewardLetter;
            for (let letter of ['A', 'B', 'C', 'D']) {
                if (await encodeSHA256(letter) === questions[question].reward_let) {
                    rewardLetter = letter;
                    break;
                }
            }
            let hiddenWord = "_ _ _ _".split(" ");
            hiddenWord[rewardPos - 1] = rewardLetter;

            rewardPopup.appendChild(title);

            rewardText.innerText = hiddenWord.join(" ");
            rewardPopup.appendChild(rewardText);
        }

        document.body.appendChild(rewardPopup);
        
        setTimeout(() => {
            document.body.removeChild(rewardPopup);
        }, 5000);
    }

    const fireworksOfConfetti = () => {
        var duration = 5 * 1000;
        var animationEnd = Date.now() + duration;
        var defaults = { startVelocity: 30, spread: 360, ticks: 60, zIndex: 0 };

        function randomInRange(min, max) {
            return Math.random() * (max - min) + min;
        }

        var interval = setInterval(function() {
        var timeLeft = animationEnd - Date.now();

        if (timeLeft <= 0) {
            return clearInterval(interval);
        }

        var particleCount = 50 * (timeLeft / duration);
            // since particles fall down, start a bit higher than random
            confetti({ ...defaults, particleCount, origin: { x: randomInRange(0.1, 0.3), y: Math.random() - 0.2 } });
            confetti({ ...defaults, particleCount, origin: { x: randomInRange(0.7, 0.9), y: Math.random() - 0.2 } });
        }, 250);
    }

    const showLastPopUp = () => {
        const lastPopup = document.getElementById('lastPopup');
        if (lastPopup) {
            const modalText = lastPopup.querySelector('.popup-text');
            if (modalText) {
                modalText.textContent = "LAST TEST";
            }
            lastPopup.classList.remove('hidden');
        } else {
            console.error('lastPopup element not found');
        }
    };

    const  showLastPopUp1 = async () =>{
        const hearth = document.getElementById('hearth');
        let size = parseFloat(localStorage.getItem('hearthSize') || '0.75');
        size += 0.2;
        if(size>4) size = 4;
        hearth.style.fontSize = `${size}rem`;
        localStorage.setItem('hearthSize', size.toString());
        const rewardPopup = document.createElement('div');
        rewardPopup.style.position = 'fixed';
        rewardPopup.style.top = '50%';
        rewardPopup.style.left = '50%';
        rewardPopup.style.transform = 'translate(-50%, -50%)';
        rewardPopup.style.width = '50%'; 
        rewardPopup.style.height = '55%'; 
        rewardPopup.classList.add('bg-neon-light');
        rewardPopup.style.borderRadius = '10px';
        rewardPopup.style.padding = '40px'; 
        rewardPopup.style.zIndex = '1002'; 
        rewardPopup.style.textAlign = 'center';
        rewardPopup.style.fontSize = '5vw'; 
        rewardPopup.style.color = '#333';
        rewardPopup.style.display = 'flex';
        rewardPopup.style.flexDirection = 'column';
        rewardPopup.style.justifyContent = 'center';
        rewardPopup.style.alignItems = 'center';

        const aplause = document.createElement('div');
        aplause.innerText = '‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è';
        rewardPopup.appendChild(aplause);

        const title = document.createElement('div');
        title.style.color = 'white';
        title.innerText = 'ENHORABONA';
        title.classList.add('my-5');

        const rewardText = document.createElement('div');
        rewardText.style.color = 'white';

        rewardPopup.appendChild(title);

        rewardText.innerText = `Disfruteu del regal, us estimem!\n‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è`;
        rewardPopup.appendChild(rewardText);

        document.body.appendChild(rewardPopup);
        
        /*setTimeout(() => {
            document.body.removeChild(rewardPopup);
        }, 5000);*/
    }

    answerBtn.addEventListener('click', async () => {
        const question = (document.getElementById('input-question-id') as HTMLInputElement).value;
        const input = document.getElementById('input-answer') as HTMLInputElement;
        let hash256 = await encodeSHA256(input.value.toUpperCase())

        console.log(question + '-' + input.value.toUpperCase())
        console.log('correct answer: ' + questions[question].answer)
        console.log('input a sha256: ' + hash256)
        console.log(questions[question].answer === hash256)

        if (questions[question].answer === hash256){
            fireworksOfConfetti()
            showReward(question)
            nextQuestion()
        } else {
            (document.getElementById('input-question-id') as HTMLInputElement).value = '0'
            setNewQuestion()

            let failureCount = parseInt(localStorage.getItem('failureCount')) || 1;
            failureCount++;
            localStorage.setItem('failureCount', failureCount.toString());
           

            const showPopup = () => {
                const popup = document.createElement('div');
                popup.style.position = 'fixed';
                popup.style.top = '0';
                popup.style.left = '0';
                popup.style.width = '100%';
                popup.style.height = '100%';
                popup.style.backgroundColor = 'rgba(0, 0, 0, 0.8)';
                popup.style.display = 'flex';
                popup.style.justifyContent = 'center';
                popup.style.alignItems = 'center';
                popup.style.zIndex = '1000';
                popup.style.padding = '10px'; // A√±adido para asegurar que el contenido se vea bien en m√≥viles

                const video = document.createElement('video');
                video.src = '/videoplayback.mp4';
                video.autoplay = true;
                video.loop = true;
                video.style.maxWidth = '100%'; // Cambiado a 100% para que se ajuste al ancho de la pantalla
                video.style.maxHeight = '80%';
                video.style.height = 'auto'; // Cambiado a auto para mantener la proporci√≥n del video
                video.style.objectFit = 'cover';

                const timer = document.createElement('div');
                timer.style.position = 'absolute';
                timer.style.bottom = '20px';
                timer.style.color = '#fff';
                timer.style.fontSize = '20px';
                timer.style.textAlign = 'center'; // Asegura que el texto est√© centrado en m√≥viles
                popup.appendChild(video);
                popup.appendChild(timer);
                document.body.appendChild(popup);

                let remainingTime = Math.pow(2, failureCount - 1);
                timer.innerText = `Temps restant: ${remainingTime} segons`;

                const interval = setInterval(() => {
                    remainingTime--;
                    timer.innerText = `Temps restant: ${remainingTime} segons`;
                    if (remainingTime <= 0) {
                        clearInterval(interval);
                    }
                }, 1000);

                setTimeout(() => {
                    const closeButton = document.createElement('button');
                    closeButton.innerText = 'Tancar';
                    closeButton.style.position = 'absolute';
                    closeButton.style.top = '20px';
                    closeButton.style.right = '20px';
                    closeButton.style.padding = '10px 20px';
                    closeButton.style.backgroundColor = '#FF204E';
                    closeButton.style.color = '#fff';
                    closeButton.style.border = 'none';
                    closeButton.style.borderRadius = '5px';
                    closeButton.style.cursor = 'pointer';

                    closeButton.addEventListener('click', () => {
                        document.body.removeChild(popup);
                    });

                    popup.appendChild(closeButton);
                    timer.style.display = 'none';
                }, Math.pow(2, failureCount - 1) * 1000);
            };

            showPopup();
        }

        /*window.addEventListener('load', () => {
            localStorage.setItem('failureCount', '0');
        });*/

    });

    const setNewQuestion = () => {
        const question = parseInt((document.getElementById('input-question-id') as HTMLInputElement).value);
        document.querySelector('.label-question').innerHTML = questions[question].question;
        localStorage.setItem('failureCount', '0');
        const inputAnswer = document.getElementById('input-answer') as HTMLInputElement
        inputAnswer.value = ''
        inputAnswer.placeholder = questions[question].placeholder;
    }

    const nextQuestion = () => {
        const questionElement = document.getElementById('input-question-id') as HTMLInputElement;
        const question = parseInt(questionElement.value);

        console.log(question)
        //Check last question
        if (question < questions.length - 1) {
            questionElement.value = (question + 1).toString();
            setNewQuestion()
        }else{
            console.log('Last question done.');
            //showLastPopUp();
            showLastPopUp1();
        }
        
    }

    setNewQuestion()
</script>
<style>
    .question {
        border: 1px solid rgba(var(--neon-medium-light), 80%);
        border-radius: 8px;
        padding: 3rem 0;
        background-color: rgb(var(--neon-medium-dark));
        text-align: center;
        font-size: 2rem;
    }

    .question-text {
        margin-bottom: 50px;
    }

    @media (max-width: 768px) {
        .question {
            padding: 2rem 0;
            font-size: 1.5rem;
        }

        .question-text {
            margin-bottom: 30px;
        }
    }

    @media (max-width: 480px) {
        .question {
            padding: 1rem 0;
            font-size: 1.2rem;
        }

        .question-text {
            margin-bottom: 20px;
        }
    }
</style>
