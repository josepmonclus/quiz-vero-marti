---
interface Props {
	question: string;
}


const { question } = Astro.props;

import { questions } from '../data/data';
---

<div class="w-full max-w">
    <form class="bg-gray-200 shadow-md rounded px-8 pt-6 pb-8 mb-4">
        <input id="input-question-id" type="text" class="hidden" value={question}>
        <div class="mb-4">
            <label class="label-question block text-neon-light text-sm font-bold mb-2" for="answer">
                ...
            </label>
            <input class="shadow appearance-none border rounded w-full py-2 px-3 text-neon-light leading-tight focus:outline-none focus:shadow-outline" 
                id="input-answer" 
                type="text" 
                placeholder="Resposta">
        </div>
        <div class="flex items-center justify-center pt-5">
            <button class="btn-answer bg-neon-light hover:bg-neon-medium-light text-white font-bold py-2 px-6 mx-10 rounded focus:outline-none focus:shadow-outline" type="button">
              Ho tenim!
            </button>
            <a class="open-popup inline-block align-baseline font-bold text-sm text-neon-light hover:text-neon-medium-light" href="#">
              Ni puta idea!
            </a>
          </div>
    </form>
    <p class="text-center text-gray-500 text-xs">
        Made with ❤️️ by Josep, Bernal & Pol
      </p>
</div>

<script>
    import { encodeSHA256 } from '../scripts/sha256';
    import { questions } from '../data/data';

    let answerBtn: HTMLElement = document.querySelector('.btn-answer');
const showPopup = () => {
    const popup = document.createElement('div');
    popup.style.position = 'fixed';
    popup.style.top = '0';
    popup.style.left = '0';
    popup.style.width = '100%';
    popup.style.height = '100%';
    popup.style.backgroundColor = 'rgba(0, 0, 0, 0.8)';
    popup.style.display = 'flex';
    popup.style.flexDirection = 'column';
    popup.style.justifyContent = 'center';
    popup.style.alignItems = 'center';
    popup.style.zIndex = '1000';
    popup.style.padding = '10px'; // Añadido para asegurar que el contenido se vea bien en móviles

    const video = document.createElement('video');
    video.src = '/videoplayback.mp4';
    video.autoplay = true;
    video.loop = true;
    video.style.width = '100%'; // Cambiado a 100% para que se ajuste al ancho de la pantalla
    video.style.height = 'auto'; // Cambiado a auto para mantener la proporción del video
    video.style.objectFit = 'cover';

    const timer = document.createElement('div');
    timer.style.position = 'absolute';
    timer.style.bottom = '20px';
    timer.style.color = '#fff';
    timer.style.fontSize = '20px';
    timer.style.textAlign = 'center'; // Asegura que el texto esté centrado en móviles

    popup.appendChild(video);
    popup.appendChild(timer);
    document.body.appendChild(popup);

    let remainingTime = Math.pow(2, failureCount - 1);
    timer.innerText = `Temps restant: ${remainingTime} segons`;
}

    answerBtn.addEventListener('click', async () => {
        const question = (document.getElementById('input-question-id') as HTMLInputElement).value;
        const input = document.getElementById('input-answer') as HTMLInputElement;
        let hash256 = await encodeSHA256(input.value)

        console.log(question + '-' + input.value)
        console.log(questions[question].answer)
        console.log(hash256)
        console.log(questions[question].answer === hash256)

        if (questions[question].answer === hash256){
            nextQuestion()
        } else {
            (document.getElementById('input-question-id') as HTMLInputElement).value = '0'
            setNewQuestion()
            
            let failureCount = parseInt(localStorage.getItem('failureCount')) || 1;
            failureCount++;
            localStorage.setItem('failureCount', failureCount);
           

            const showPopup = () => {
                const popup = document.createElement('div');
                popup.style.position = 'fixed';
                popup.style.top = '0';
                popup.style.left = '0';
                popup.style.width = '100%';
                popup.style.height = '100%';
                popup.style.backgroundColor = 'rgba(0, 0, 0, 0.8)';
                popup.style.display = 'flex';
                popup.style.justifyContent = 'center';
                popup.style.alignItems = 'center';
                popup.style.zIndex = '1000';
                popup.style.padding = '10px'; // Añadido para asegurar que el contenido se vea bien en móviles

                const video = document.createElement('video');
                video.src = '/videoplayback.mp4';
                video.autoplay = true;
                video.loop = true;
                video.style.maxWidth = '100%'; // Cambiado a 100% para que se ajuste al ancho de la pantalla
                video.style.maxHeight = '80%';
                video.style.height = 'auto'; // Cambiado a auto para mantener la proporción del video
                video.style.objectFit = 'cover';

                const timer = document.createElement('div');
                timer.style.position = 'absolute';
                timer.style.bottom = '20px';
                timer.style.color = '#fff';
                timer.style.fontSize = '20px';
                timer.style.textAlign = 'center'; // Asegura que el texto esté centrado en móviles
                popup.appendChild(video);
                popup.appendChild(timer);
                document.body.appendChild(popup);

                let remainingTime = Math.pow(2, failureCount - 1);
                timer.innerText = `Temps restant: ${remainingTime} segons`;

                const interval = setInterval(() => {
                    remainingTime--;
                    timer.innerText = `Temps restant: ${remainingTime} segons`;
                    if (remainingTime <= 0) {
                        clearInterval(interval);
                    }
                }, 1000);

                setTimeout(() => {
                    const closeButton = document.createElement('button');
                    closeButton.innerText = 'Tancar';
                    closeButton.style.position = 'absolute';
                    closeButton.style.top = '20px';
                    closeButton.style.right = '20px';
                    closeButton.style.padding = '10px 20px';
                    closeButton.style.backgroundColor = '#FF204E';
                    closeButton.style.color = '#fff';
                    closeButton.style.border = 'none';
                    closeButton.style.borderRadius = '5px';
                    closeButton.style.cursor = 'pointer';

                    closeButton.addEventListener('click', () => {
                        document.body.removeChild(popup);
                    });

                    popup.appendChild(closeButton);
                    timer.style.display = 'none';
                }, Math.pow(2, failureCount - 1) * 1000);
            };

            showPopup();
        }

        /*window.addEventListener('load', () => {
            localStorage.setItem('failureCount', '0');
        });*/

    });

    const setNewQuestion = () => {
        const question = parseInt((document.getElementById('input-question-id') as HTMLInputElement).value);
        document.querySelector('.label-question').innerHTML = questions[question].question;
        localStorage.setItem('failureCount', '0');
        const inputAnswer = document.getElementById('input-answer') as HTMLInputElement
        inputAnswer.value = ''
        inputAnswer.placeholder = questions[question].placeholder;
    }

    const nextQuestion = () => {
        const question = parseInt(document.getElementById('input-question-id').value);

        console.log(question)

        document.getElementById('input-question-id').value = question + 1;

        setNewQuestion()
    }

    setNewQuestion()
</script>
<style>
    .question {
        border: 1px solid rgba(var(--neon-medium-light), 80%);
        border-radius: 8px;
        padding: 3rem 0;
        background-color: rgb(var(--neon-medium-dark));
        text-align: center;
        font-size: 2rem;
    }

    .question-text {
        margin-bottom: 50px;
    }

    @media (max-width: 768px) {
        .question {
            padding: 2rem 0;
            font-size: 1.5rem;
        }

        .question-text {
            margin-bottom: 30px;
        }
    }

    @media (max-width: 480px) {
        .question {
            padding: 1rem 0;
            font-size: 1.2rem;
        }

        .question-text {
            margin-bottom: 20px;
        }
    }
</style>
